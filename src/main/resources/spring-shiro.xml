<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 基于Form表单的身份验证过滤器 -->
    <!--    <bean id="formAuthenticationFilter"
              class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
            <property name="usernameParam" value="username"/>
            <property name="passwordParam" value="password"/>
        </bean>-->
    <!--    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
            <property name=""
        </bean>-->
    <!-- 1.启用shrio授权注解拦截方式 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 装配 securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置被拦截登陆失败页面 -->
        <!--<property name="loginUrl" value="/views/homepage.html"/>-->
        <!-- 认证成功统一跳转，如果不配置，shiro认证成功自动到上一个请求路径-->
        <!--<property name="successUrl" value="/views/homepage.html"/>-->
        <!-- 权限认证失败，跳转页面-->
        <!-- <property name="unauthorizedUrl" value="/view/signin.html"/>-->
        <!--        <property name="filters">
                    <map>
                        <entry key="authc" value-ref="formAuthenticationFilter"/>
                    </map>
                </property>-->
        <!--过滤器链-->
        <property name="filterChainDefinitions">
            <value>
                <!-- /login = anon-->
                /logout = logout
                /** = anon
            </value>
        </property>
    </bean>
    <!-- 2.配置Shiro安全管理器，核心安全管理接口 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--<property name="cacheManager" ref="cacheManager"/>-->
        <property name="realms" ref="encryptionRealm"/>
        <!--<property name="sessionManager" ref="sessionManager"/>-->
        <!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
    </bean>
    <!-- 3.配置encache缓存管理器 -->
    <!--<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        &lt;!&ndash; 指定 ehcache 的配置文件 &ndash;&gt;
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>-->
    <!-- 4.配置进行授权和认证的 自定义Realm -->
    <bean id="encryptionRealm" class="com.ling.shiro.realm.EncryptionRealm">
        <!--密码/凭证匹配器，用于加密操作-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>
    <!--权限管理-->
    <bean id="authorizationRealm" class="com.ling.shiro.realm.PermissionRealm"/>

    <!-- 5.密码/凭证匹配器，用于加密操作-->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--配置算法名称-->
        <property name="hashAlgorithmName" value="MD5"/>
        <!--配置加密散列次数-->
        <property name="hashIterations" value="3"/>
    </bean>
    <!-- 6.shiro Session会话管理器 -->
    <!--<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        &lt;!&ndash; 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 &ndash;&gt;
        <property name="globalSessionTimeout" value="1800000"/>
        &lt;!&ndash; 删除所有无效的Session对象，此时的session被保存在了内存里面 &ndash;&gt;
        <property name="deleteInvalidSessions" value="true"/>
        &lt;!&ndash; 定义要使用的无效的Session定时调度器 &ndash;&gt;
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        &lt;!&ndash; 需要让此session可以使用该定时调度器进行检测 &ndash;&gt;
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        &lt;!&ndash; 定义Session可以进行序列化的工具类 &ndash;&gt;
        <property name="sessionDAO" ref="sessionDAO"/>
        &lt;!&ndash; 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 &ndash;&gt;
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        &lt;!&ndash; 定义sessionIdCookie模版可以进行操作的启用 &ndash;&gt;
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>
    &lt;!&ndash; 会话DAO &ndash;&gt;
    <bean id="sessionDAO"
          class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    &lt;!&ndash; 会话ID生成器 &ndash;&gt;
    <bean id="sessionIdGenerator"
          class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    &lt;!&ndash; 会话验证调度器 &ndash;&gt;
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        &lt;!&ndash;session验证时间，30分钟&ndash;&gt;
        <property name="Interval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    &lt;!&ndash; 7.会话Cookie模板 &ndash;&gt;
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="WHALEID"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>-->
    <!--    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
            <constructor-arg value="sid"/>
            <property name="path" value="/"/>
            <property name="httpOnly" value="true"/>
            <property name="maxAge" value="3600"/>&lt;!&ndash; 7天 &ndash;&gt;
        </bean>

         8.rememberMe管理器
        <bean id="rememberMeManager"
              class="org.apache.shiro.web.mgt.CookieRememberMeManager">
            <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
            <property name="cookie" ref="rememberMeCookie"/>
        </bean>-->
    <!--开启spring aop对类代理-->
    <aop:config proxy-target-class="true"/>

    <!-- .开启Shiro权限注解 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- .配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>